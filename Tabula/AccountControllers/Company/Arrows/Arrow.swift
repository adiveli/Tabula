//
//  Arrow.swift
//
//  Created on Nov 16, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class Arrow: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawArrow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 57, height: 104), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 57, height: 104), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 57, y: resizedFrame.height / 104)
        
        /// promotionCodeArrow
        do {
            context.saveGState()
            context.translateBy(x: 30.5, y: 53)
            context.scaleBy(x: -1, y: 1)
            context.rotate(by: 348 * CGFloat.pi/180)
            context.translateBy(x: -18.5, y: -56)
            
            
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 35.88, y: 110.41))
            shape.addCurve(to: CGPoint(x: 8.9, y: 28.4), controlPoint1: CGPoint(x: 18.58, y: 86.55), controlPoint2: CGPoint(x: 9.11, y: 57.58))
            shape.addCurve(to: CGPoint(x: 10.56, y: 3.37), controlPoint1: CGPoint(x: 8.87, y: 20.04), controlPoint2: CGPoint(x: 9.5, y: 11.7))
            shape.addCurve(to: CGPoint(x: 10.84, y: 4.07), controlPoint1: CGPoint(x: 10.64, y: 3.63), controlPoint2: CGPoint(x: 10.76, y: 3.81))
            shape.addCurve(to: CGPoint(x: 12.32, y: 7.14), controlPoint1: CGPoint(x: 11.36, y: 5.11), controlPoint2: CGPoint(x: 11.88, y: 6.15))
            shape.addCurve(to: CGPoint(x: 15.26, y: 13.72), controlPoint1: CGPoint(x: 13.32, y: 9.31), controlPoint2: CGPoint(x: 14.31, y: 11.47))
            shape.addCurve(to: CGPoint(x: 17.63, y: 15.43), controlPoint1: CGPoint(x: 15.66, y: 14.58), controlPoint2: CGPoint(x: 16.82, y: 15.1))
            shape.addCurve(to: CGPoint(x: 19.51, y: 15.46), controlPoint1: CGPoint(x: 17.8, y: 15.52), controlPoint2: CGPoint(x: 19.83, y: 16.07))
            shape.addCurve(to: CGPoint(x: 14.46, y: 5.15), controlPoint1: CGPoint(x: 17.91, y: 12), controlPoint2: CGPoint(x: 16.23, y: 8.49))
            shape.addCurve(to: CGPoint(x: 8.22, y: 0.05), controlPoint1: CGPoint(x: 13.33, y: 3.02), controlPoint2: CGPoint(x: 11.3, y: -0.46))
            shape.addCurve(to: CGPoint(x: 6.25, y: 2.13), controlPoint1: CGPoint(x: 7.12, y: 0.22), controlPoint2: CGPoint(x: 6.64, y: 1.26))
            shape.addCurve(to: CGPoint(x: 4.18, y: 7.53), controlPoint1: CGPoint(x: 5.47, y: 3.89), controlPoint2: CGPoint(x: 4.87, y: 5.73))
            shape.addCurve(to: CGPoint(x: 0.01, y: 18.95), controlPoint1: CGPoint(x: 2.71, y: 11.29), controlPoint2: CGPoint(x: 1.32, y: 15.09))
            shape.addCurve(to: CGPoint(x: 2.28, y: 20.06), controlPoint1: CGPoint(x: -0.19, y: 19.49), controlPoint2: CGPoint(x: 2.08, y: 20.6))
            shape.addCurve(to: CGPoint(x: 6.64, y: 10.26), controlPoint1: CGPoint(x: 3.77, y: 16.85), controlPoint2: CGPoint(x: 5.23, y: 13.51))
            shape.addCurve(to: CGPoint(x: 6.73, y: 10.1), controlPoint1: CGPoint(x: 6.68, y: 10.18), controlPoint2: CGPoint(x: 6.68, y: 10.18))
            shape.addCurve(to: CGPoint(x: 7.01, y: 45.61), controlPoint1: CGPoint(x: 5.04, y: 21.87), controlPoint2: CGPoint(x: 5.43, y: 33.91))
            shape.addCurve(to: CGPoint(x: 19.83, y: 88.09), controlPoint1: CGPoint(x: 8.95, y: 60.21), controlPoint2: CGPoint(x: 13.34, y: 74.62))
            shape.addCurve(to: CGPoint(x: 32.69, y: 109.56), controlPoint1: CGPoint(x: 23.47, y: 95.59), controlPoint2: CGPoint(x: 27.74, y: 102.77))
            shape.addCurve(to: CGPoint(x: 34.9, y: 110.96), controlPoint1: CGPoint(x: 33.18, y: 110.26), controlPoint2: CGPoint(x: 34.03, y: 110.72))
            shape.addCurve(to: CGPoint(x: 35.88, y: 110.41), controlPoint1: CGPoint(x: 35.2, y: 111.02), controlPoint2: CGPoint(x: 36.37, y: 111.11))
            shape.close()
            context.saveGState()
            context.translateBy(x: 0.26, y: 0.25)
            UIColor.black.setFill()
            shape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfArrow() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 57, height: 104), false, 0)
        Arrow.drawArrow()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
